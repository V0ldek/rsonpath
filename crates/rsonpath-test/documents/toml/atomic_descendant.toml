[input]
description = "nested atomic member"
is_compressed = false

[input.source]
json_string = """
{
    "a": 42,
    "b": [
        {
            "b": 43
        }
    ]
}
"""

[[queries]]
query = "$..a"
description = "select a number that is a child"

[queries.results]
count = 1
spans = [[11, 13]]
nodes = ["42"]

[[queries]]
query = "$..a..b"
description = "look for descendants of an atomic value"

[queries.results]
count = 0
spans = []
nodes = []

[[queries]]
query = "$..*..b"
description = "look for 'b' on at least one level of nesting"

[queries.results]
count = 1
spans = [[53, 55]]
nodes = ["43"]

[[queries]]
query = "$..*"
description = "select all decsendants"

[queries.results]
count = 4
spans = [[11, 13], [24, 71], [34, 65], [53, 55]]
nodes = ["42", """
[
        {
            "b": 43
        }
    ]""", """
{
            "b": 43
        }""", "43"]

[[queries]]
query = "$.b[0]"
description = "select the first element of 'b'"

[queries.results]
count = 1
spans = [[34, 65]]
nodes = ["""{
            "b": 43
        }"""]

[[queries]]
query = "$[1]"
description = "select the second element of the root (which is not an array, so result should be empty)"

[queries.results]
count = 0
spans = []
nodes = []

[[queries]]
query = "$.b[1]"
description = "select the second element of 'b' (which does not exist)"

[queries.results]
count = 0
spans = []
nodes = []

[[queries]]
query = "$..[0]"
description = "select first item from list descendants"

[queries.results]
count = 1
spans = [[34, 65]]
nodes = ["""
{
            "b": 43
        }"""]

[[queries]]
query = "$.b[0].b"
description = "select the nested 'b' directly"

[queries.results]
count = 1
spans = [[53, 55]]
nodes = ["43"]
