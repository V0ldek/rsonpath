name: Release

on:
  workflow_dispatch:
  push:
    tags:
      - v**

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: "aarch64-linux-gnu-gcc"

permissions:
  contents: read

jobs:
  check-install:
    name: Check cargo install succeeds
    runs-on: ubuntu-latest
    steps:
    - name: Checkout source
      uses: actions/checkout@v3
      with:
        submodules: true
    - name: Remove config
      run: rm -rf ./.cargo
    - name: Install Rust toolchain (stable)
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        target: ${{ matrix.triple }}
    - name: Override toolchain
      run: rustup override set stable
    - name: Install
      run: cargo install --bin rq --path ./crates/rsonpath
      env:
        RUSTFLAGS: "--deny warnings"
  
  build:
    name: Build matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        include:
          - os: ubuntu-latest
            triple: aarch64-unknown-linux-gnu
            simd-overload: ''
            target-features: ''
            artifact-suffix: nosimd
            prologue-script: sudo apt update && sudo apt install gcc-aarch64-linux-gnu
          - os: ubuntu-latest
            triple: i686-unknown-linux-gnu
            simd-overload: ''
            target-features: ''
            artifact-suffix: nosimd
            prologue-script: sudo apt update && sudo apt install gcc-multilib
          - os: ubuntu-latest
            triple: i686-unknown-linux-gnu
            simd-overload: 'avx2_32'
            target-features: +avx2,+pclmulqdq
            artifact-suffix: avx2-pclmulqdq
            prologue-script: sudo apt update && sudo apt install gcc-multilib
          - os: ubuntu-latest
            triple: i686-unknown-linux-gnu
            simd-overload: 'ssse3_32'
            target-features: +ssse3,+pclmulqdq
            artifact-suffix: ssse3-pclmulqdq
            prologue-script: sudo apt update && sudo apt install gcc-multilib
          - os: ubuntu-latest
            triple: x86_64-unknown-linux-gnu
            simd-overload: 'avx2_64'
            target-features: +avx2,+pclmulqdq
            artifact-suffix: avx2-pclmulqdq
          - os: ubuntu-latest
            triple: x86_64-unknown-linux-gnu
            simd-overload: 'ssse3_64'
            target-features: +ssse3,+pclmulqdq
            artifact-suffix: ssse3-pclmulqdq
          - os: ubuntu-latest
            triple: x86_64-unknown-linux-gnu
            simd-overload: ''
            target-features: ''
            artifact-suffix: nosimd
          - os: macos-latest
            triple: x86_64-apple-darwin
            simd-overload: ''
            target-features: ''
            artifact-suffix: nosimd
          - os: windows-latest
            triple: i686-pc-windows-gnu
            simd-overload: 'avx2_32'
            target-features: +avx2,+pclmulqdq
            artifact-suffix: avx2-pclmulqdq
            needs-mingw: x86
          - os: windows-latest
            triple: i686-pc-windows-gnu
            simd-overload: 'ssse3_32'
            target-features: +ssse3,+pclmulqdq
            artifact-suffix: ssse3-pclmulqdq
            needs-mingw: x86
          - os: windows-latest
            triple: i686-pc-windows-gnu
            simd-overload: ''
            target-features: ''
            artifact-suffix: nosimd
            needs-mingw: x86
          - os: windows-latest
            triple: i686-pc-windows-msvc
            simd-overload: 'avx2_32'
            target-features: +avx2,+pclmulqdq
            artifact-suffix: avx2-pclmulqdq
          - os: windows-latest
            triple: i686-pc-windows-msvc
            simd-overload: 'ssse3_32'
            target-features: +ssse3,+pclmulqdq
            artifact-suffix: ssse3-pclmulqdq
          - os: windows-latest
            triple: i686-pc-windows-msvc
            simd-overload: ''
            target-features: ''
            artifact-suffix: nosimd
          - os: windows-latest
            triple: x86_64-pc-windows-gnu
            simd-overload: 'ssse3_64'
            target-features: +ssse3,+pclmulqdq
            artifact-suffix: ssse3-pclmulqdq
          - os: windows-latest
            triple: x86_64-pc-windows-gnu
            simd-overload: 'avx2_64'
            target-features: +avx2,+pclmulqdq
            artifact-suffix: avx2-pclmulqdq
          - os: windows-latest
            triple: x86_64-pc-windows-gnu
            simd-overload: ''
            target-features: ''
            artifact-suffix: nosimd
          - os: windows-latest
            triple: x86_64-pc-windows-msvc
            simd-overload: 'avx2_64'
            target-features: +avx2,+pclmulqdq
            artifact-suffix: avx2-pclmulqdq
          - os: windows-latest
            triple: x86_64-pc-windows-msvc
            simd-overload: 'ssse3_64'
            target-features: +ssse3,+pclmulqdq
            artifact-suffix: ssse3-pclmulqdq
          - os: windows-latest
            triple: x86_64-pc-windows-msvc
            simd-overload: ''
            target-features: ''
            artifact-suffix: nosimd
    steps:
    - name: Run prologue script
      if: matrix.prologue-script != ''
      run: ${{ matrix.prologue-script }}
    - name: Cache restore (MinGW)
      id: cache-restore-mingw
      if: matrix.needs-mingw != ''
      uses: actions/cache@v3
      with:
        path: |
          C:\ProgramData\chocolatey\lib\mingw
        key: ${{ matrix.os }}-mingw-${{ matrix.needs-mingw }}-11-2
    - name: Set up MinGW ${{ matrix.needs-mingw }}
      if: matrix.needs-mingw != '' && steps.cache-restore-mingw.outputs.cache-hit != 'true'
      uses: egor-tensin/setup-mingw@v2
      with:
        platform: ${{ matrix.needs-mingw }}
    - name: Add MinGW to PATH
      if: matrix.needs-mingw != ''
      run: echo "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw32\bin" >> $env:GITHUB_PATH
    - name: Checkout source
      uses: actions/checkout@v3
      with:
        submodules: true
    - name: Install Rust toolchain (stable)
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        target: ${{ matrix.triple }}
    - name: Override toolchain
      run: rustup override set stable
    - name: Cache restore
      id: cache-restore-cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ matrix.os }}-${{ matrix.triple }}-${{ matrix.artifact-suffix }}-cargo-${{ hashFiles('**/Cargo.toml') }}-release
    - name: Build release without simd
      if: matrix.target-features == ''
      run: cargo build --package rsonpath --release --no-default-features --target ${{ matrix.triple }}
      env:
        RUSTFLAGS: "--deny warnings"
    - name: Build release with target-feature=${{ matrix.target-features }}
      if: matrix.target-features != ''
      run: cargo build --package rsonpath --release --target ${{ matrix.triple }}
      env:
        RUSTFLAGS: "-C target-feature=${{ matrix.target-features }} --deny warnings"
        RSONPATH_UNSAFE_FORCE_SIMD: ${{ matrix.simd-overload }}
    - name: Rename binary (Unix)
      if: matrix.os != 'windows-latest'
      run: mv "target/${{ matrix.triple }}/release/rq" target/release/rq-${{ matrix.triple }}-${{ matrix.artifact-suffix }}
    - name: Rename binary (Windows)
      if: matrix.os == 'windows-latest'
      run: mv -Force "target/${{ matrix.triple }}/release/rq.exe" target/release/rq-${{ matrix.triple }}-${{ matrix.artifact-suffix }}.exe
    - name: Upload the binary as artifact
      uses: actions/upload-artifact@v3.1.2
      with:
        name: rq-${{ matrix.triple }}-${{ matrix.artifact-suffix }}-${{ github.ref }}
        path: target/release/rq-${{ matrix.triple }}-${{ matrix.artifact-suffix }}*
        if-no-files-found: error

  github-release:
    name: Release on GitHub
    runs-on: ubuntu-latest
    needs: [build, check-install]
    outputs: 
      hashes: ${{ steps.hash.outputs.hashes }}
    permissions:
      contents: write
    steps:
    - name: Download artifacts from build
      uses: actions/download-artifact@v3.0.2
      with:
        path: release/
    - name: Generate provenance subjects
      id: hash
      run: echo "hashes=$(sha256sum release/**/* | base64 -w0)" > $GITHUB_OUTPUT
    - name: Generate provenance subjects sanity check
      id: hash-sanity
      run: echo "$(sha256sum release/**/* | base64 -w0)"
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: release/**/*
        fail_on_unmatched_files: true
        prerelease: ${{ endsWith(github.ref, 'rc') || endsWith(github.ref, 'alpha') || endsWith(github.ref, 'beta') }}
        draft: true

  provenance:
    needs: [github-release]
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.9.0
    permissions:
      actions: read
      id-token: write
      contents: write
    with:
      base64-subjects: ${{ needs.github-release.outputs.hashes }}
      upload-assets: true
      upload-tag-name: ${{ github.ref }}
