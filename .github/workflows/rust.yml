name: Rust

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: "aarch64-linux-gnu-gcc"

jobs:
  test-gen:
    name: Generate rsonpath-test cases
    runs-on: ubuntu-latest
    steps:
      - name: Install lld
        run: sudo apt install lld
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install Rust toolchain (stable)
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          target: x86_64-unknown-linux-gnu
      - name: Override toolchain
        run: rustup override set stable
      - name: Cache restore (Cargo)
        id: cache-restore-cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: x86_64-unknown-linux-gnu-x86_64-unknown-linux-gnu--cargo-${{ hashFiles('**/Cargo.toml') }}
      - name: Build with test codegen
        id: build-test-codegen
        run: cargo build -p rsonpath-test -vv
      - name: Upload generated tests as artifact
        uses: actions/upload-artifact@v3
        with:
          name: rsonpath-test-documents
          path: crates/rsonpath-test/tests/documents
          retention-days: 1

  test:
    name: Test matrix
    runs-on: ${{ matrix.os }}
    needs: test-gen
    env:
      RSONPATH_TEST_ALLOW_GENERATION: 0
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - stable
          - nightly
        triple:
          - aarch64-unknown-linux-gnu
          - i686-unknown-linux-gnu
          - x86_64-unknown-linux-gnu
          - x86_64-apple-darwin
          - i686-pc-windows-gnu
          - i686-pc-windows-msvc
          - x86_64-pc-windows-gnu
          - x86_64-pc-windows-msvc
        include:
          - os: ubuntu-latest
            triple: aarch64-unknown-linux-gnu
            target-features: ''
            prologue-script: sudo apt update && sudo apt install gcc-aarch64-linux-gnu
            can-run: false
          - os: ubuntu-latest
            triple: i686-unknown-linux-gnu
            target-features: ''
            prologue-script: sudo apt update && sudo apt install gcc-multilib
            can-run: true
          - os: ubuntu-latest
            triple: x86_64-unknown-linux-gnu
            target-features: +avx2,+pclmulqdq
            can-run: true
          - os: macos-latest
            triple: x86_64-apple-darwin
            target-features: ''
            can-run: true
          - os: windows-latest
            triple: i686-pc-windows-gnu
            target-features: ''
            needs-mingw: x86
            can-run: true
          - os: windows-latest
            triple: i686-pc-windows-msvc
            target-features: ''
            can-run: true
          - os: windows-latest
            triple: x86_64-pc-windows-gnu
            target-features: +avx2,+pclmulqdq
            can-run: true
          - os: windows-latest
            triple: x86_64-pc-windows-msvc
            target-features: +avx2,+pclmulqdq
            can-run: true
    steps:
      - name: Cache restore (MinGW)
        id: cache-restore-mingw
        if: matrix.needs-mingw != ''
        uses: actions/cache@v3
        with:
          path: |
            C:\ProgramData\chocolatey\lib\mingw
          key: ${{ matrix.os }}-mingw-${{ matrix.needs-mingw }}-11-2
      - name: Set up MinGW ${{ matrix.needs-mingw }}
        if: matrix.needs-mingw != '' && steps.cache-restore-mingw.outputs.cache-hit != 'true'
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: ${{ matrix.needs-mingw }}
      - name: Add MinGW to PATH
        if: matrix.needs-mingw != '' && steps.cache-restore-mingw.outputs.cache-hit == 'true'
        run: echo "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw32\bin" >> $env:GITHUB_PATH
      - name: Run prologue script
        if: matrix.prologue-script != ''
        run: ${{ matrix.prologue-script }}
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install Rust toolchain (${{ matrix.toolchain }})
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
          target: ${{ matrix.triple }}
      - name: Override toolchain
        run: rustup override set ${{ matrix.toolchain }}
      - name: Cache restore (Cargo)
        id: cache-restore-cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ matrix.toolchain }}-${{ matrix.triple }}-${{ matrix.target_features }}-cargo-${{ hashFiles('**/Cargo.toml') }}
      - name: Install cargo-hack
        if: steps.cache-restore-cargo.outputs.cache-hit != 'true'
        run: cargo install cargo-hack
        env:
          CARGO_TARGET_DIR: target/
      - name: Build all feature sets with target-feature=${{ matrix.target-features }}
        if: matrix.target-features != ''
        run: cargo hack build --workspace --exclude rsonpath-benchmarks --feature-powerset --skip default --target ${{ matrix.triple }}
        env:
          RUSTFLAGS: "-C target-feature=${{ matrix.target-features }} --deny warnings"
      - name: Build without simd
        if: matrix.target-features == ''
        run: cargo hack build --workspace --exclude rsonpath-benchmarks --feature-powerset --skip default --exclude-features simd --target ${{ matrix.triple }}
        env:
          RUSTFLAGS: "--deny warnings"
      - name: Download rsonpath-test artifact
        uses: actions/download-artifact@v3
        with:
          name: rsonpath-test-documents
          path: crates/rsonpath-test/tests/documents
      - name: Test all feature sets with target-feature=${{ matrix.target-features }}
        if: matrix.can-run && matrix.target-features != ''
        run: cargo hack test --workspace --exclude rsonpath-benchmarks --feature-powerset --skip default --target ${{ matrix.triple }}
        env:
          RUSTFLAGS: "-C target-feature=${{ matrix.target-features }} --deny warnings"
      - name: Test without simd
        if: matrix.can-run && matrix.target-features == ''
        run: cargo hack test --workspace --exclude rsonpath-benchmarks --feature-powerset --skip default --exclude-features simd --target ${{ matrix.triple }}
        env:
          RUSTFLAGS: "--deny warnings"

  clippy:
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - stable
          - nightly
    permissions:
      checks: write
    name: Clippy (${{ matrix.toolchain }})
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Install lld
      run: sudo apt install lld
    - name: Install Rust toolchain (${{ matrix.toolchain }})
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.toolchain }}
        components: clippy, rustfmt
    - name: Override toolchain
      run: rustup override set ${{ matrix.toolchain }}
    - name: Cache restore
      id: cache-restore
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ubuntu-latest-${{ matrix.toolchain }}-cargo-${{ hashFiles('**/Cargo.toml') }}-clippy
    - name: Build all features
      run: cargo build --workspace --exclude rsonpath-benchmarks --all-features --release
      env:
        RUSTFLAGS: "-C target-feature=+avx2 --deny warnings"
    - name: Clippy all features
      uses: actions-rs/clippy-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        args: --workspace --exclude rsonpath-benchmarks --all-features --release -- --deny warnings
      env:
        RUSTFLAGS: "-C target-feature=+avx2"    
    - name: Build without simd
      run: cargo build --workspace --exclude rsonpath-benchmarks --no-default-features --release
      env:
        RUSTFLAGS: "--deny warnings"
    - name: Clippy without simd
      uses: actions-rs/clippy-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        args: --workspace --exclude rsonpath-benchmarks --no-default-features --release -- --deny warnings

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install Rust toolchain (nightly)
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          components: clippy, rustfmt
      - name: Override toolchain
        run: rustup override set nightly
      - name: Cache restore
        id: cache-restore
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ubuntu-latest-nightly-avx2-cargo-${{ hashFiles('**/Cargo.toml') }}-doc
      - name: cargo doc
        run: cargo doc --package rsonpath-lib --all-features --no-deps --release
        env:
          RUSTFLAGS: "-C target-feature=+avx2"
          RUSTDOCFLAGS: "-Dwarnings --cfg docsrs"

  format:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install Rust toolchain (stable)
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: clippy, rustfmt    
      - name: Override toolchain
        run: rustup override set stable
      - name: Format
        run: cargo fmt --package rsonpath rsonpath-lib -- --check
