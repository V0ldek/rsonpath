name: Rust

on:
  workflow_dispatch:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: "aarch64-linux-gnu-gcc"
  CARGO_PROFILE_DEV_BUILD_OVERRIDE_DEBUG: "true"

jobs:
  test-gen:
    uses: ./.github/workflows/test-codegen.yml

  test:
    name: Test matrix
    runs-on: ${{ matrix.os }}
    needs: test-gen
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - stable
          - nightly
        target_triple:
          - aarch64-unknown-linux-gnu
          - i686-pc-windows-gnu
          - i686-pc-windows-msvc
          - i686-unknown-linux-gnu
          - x86_64-apple-darwin
          - x86_64-pc-windows-gnu
          - x86_64-pc-windows-msvc
          - x86_64-unknown-linux-gnu
        include:
          - os: ubuntu-latest
            target_triple: aarch64-unknown-linux-gnu
             # This target needs special setup.
            prologue-script: sudo apt update && sudo apt install gcc-aarch64-linux-gnu
             # There is no standard GitHub os image that can execute ARM, we just build it.
            can-run: false
          - os: windows-latest
            target_triple: i686-pc-windows-gnu
             # This target needs special setup with MinGW.
            needs-mingw: x86
            can-run: true
          - os: windows-latest
            target_triple: i686-pc-windows-msvc
            can-run: true
          - os: ubuntu-latest
            target_triple: i686-unknown-linux-gnu
             # This target needs special setup.
            prologue-script: sudo apt update && sudo apt install gcc-multilib
            can-run: true
          - os: macos-latest
            target_triple: x86_64-apple-darwin
            can-run: true
          - os: windows-latest
            target_triple: x86_64-pc-windows-gnu
            can-run: true
          - os: windows-latest
            target_triple: x86_64-pc-windows-msvc
            can-run: true
          - os: ubuntu-latest
            target_triple: x86_64-unknown-linux-gnu
            can-run: true
    steps:
      - name: Cache restore (MinGW)
        id: cache-restore-mingw
        if: matrix.needs-mingw != ''
        uses: actions/cache@704facf57e6136b1bc63b828d79edcd491f0ee84 # v3.3.2
        with:
          path: |
            C:\ProgramData\chocolatey\lib\mingw
          key: ${{ matrix.os }}-mingw-${{ matrix.needs-mingw }}-11-2
      - name: Set up MinGW ${{ matrix.needs-mingw }}
        if: matrix.needs-mingw != '' && steps.cache-restore-mingw.outputs.cache-hit != 'true'
        uses: egor-tensin/setup-mingw@84c781b557efd538dec66bde06988d81cd3138cf # v2.2.0
        with:
          platform: ${{ matrix.needs-mingw }}
      - name: Add MinGW to PATH
        if: matrix.needs-mingw != '' && steps.cache-restore-mingw.outputs.cache-hit == 'true'
        run: echo "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw32\bin" >> $env:GITHUB_PATH
      - name: Run prologue script
        if: matrix.prologue-script != ''
        run: ${{ matrix.prologue-script }}
      - name: Checkout sources
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0
        with:
          submodules: true
      - name: Install Rust toolchain (${{ matrix.toolchain }})
        uses: dtolnay/rust-toolchain@5cb429dd810e16ff67df78472fa81cf760f4d1c0 # master
        with:
          toolchain: ${{ matrix.toolchain }}
          target: ${{ matrix.target_triple }}
      - name: Override toolchain
        run: rustup override set ${{ matrix.toolchain }}
      - name: Cache restore (Cargo)
        id: cache-restore-cargo
        uses: actions/cache@704facf57e6136b1bc63b828d79edcd491f0ee84 # v3.3.2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ matrix.toolchain }}-${{ matrix.target_triple }}-cargo-${{ hashFiles('**/Cargo.toml') }}
      - name: Install cargo-hack
        if: steps.cache-restore-cargo.outputs.cache-hit != 'true'
        run: cargo install cargo-hack
        env:
          CARGO_TARGET_DIR: target/
      - name: Build all feature sets
        run: cargo hack build --workspace --feature-powerset --skip default --target ${{ matrix.target_triple }}
        env:
          RUSTFLAGS: "-C link-arg=-fuse-ld=lld --deny warnings"
      - name: Download rsonpath-test artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
        with:
          name: ${{ needs.test-gen.outputs.artifact-name }}
          path: ${{ needs.test-gen.outputs.artifact-path }}
      - name: Test all feature sets
        if: matrix.can-run
        run: cargo hack test --workspace --feature-powerset --skip default --target ${{ matrix.target_triple }}
        env:
          RUSTFLAGS: "-C link-arg=-fuse-ld=lld --deny warnings"

  clippy:
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - stable
          - nightly
    permissions:
      checks: write
    name: Clippy (${{ matrix.toolchain }})
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0
        with:
          submodules: true
      - name: Install lld
        run: sudo apt install lld
      - name: Install Rust toolchain (${{ matrix.toolchain }})
        uses: dtolnay/rust-toolchain@5cb429dd810e16ff67df78472fa81cf760f4d1c0 # master
        with:
          toolchain: ${{ matrix.toolchain }}
          components: clippy, rustfmt
      - name: Override toolchain
        run: rustup override set ${{ matrix.toolchain }}
      - name: Cache restore
        id: cache-restore
        uses: actions/cache@704facf57e6136b1bc63b828d79edcd491f0ee84 # v3.3.2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ubuntu-latest-${{ matrix.toolchain }}-cargo-${{ hashFiles('**/Cargo.toml') }}-clippy
      - name: Build all features
        run: cargo build --workspace --all-features --release
        env:
          RUSTFLAGS: "-C link-arg=-fuse-ld=lld --deny warnings"
      - name: Clippy all features
        uses: actions-rs/clippy-check@b5b5f21f4797c02da247df37026fcd0a5024aa4d # v1.0.7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --workspace --all-features --release -- --deny warnings
        env:
          RUSTFLAGS: "-C link-arg=-fuse-ld=lld"

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0
        with:
          submodules: true
      - name: Install Rust toolchain (nightly)
        uses: dtolnay/rust-toolchain@5cb429dd810e16ff67df78472fa81cf760f4d1c0 # master
        with:
          toolchain: nightly
          components: clippy, rustfmt
      - name: Override toolchain
        run: rustup override set nightly
      - name: Cache restore
        id: cache-restore
        uses: actions/cache@704facf57e6136b1bc63b828d79edcd491f0ee84 # v3.3.2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ubuntu-latest-nightly-avx2-cargo-${{ hashFiles('**/Cargo.toml') }}-doc
      - name: cargo doc
        run: cargo doc --package rsonpath-lib --all-features --no-deps --release
        env:
          RUSTDOCFLAGS: "-Dwarnings --cfg docsrs"

  format:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0
        with:
          submodules: true
      - name: Install Rust toolchain (stable)
        uses: dtolnay/rust-toolchain@5cb429dd810e16ff67df78472fa81cf760f4d1c0 # master
        with:
          toolchain: stable
          components: clippy, rustfmt
      - name: Override toolchain
        run: rustup override set stable
      - name: Format
        run: cargo fmt --package rsonpath rsonpath-lib -- --check

  cargo-deny:
    name: Dependency scan (cargo-deny)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0
      - uses: EmbarkStudios/cargo-deny-action@a50c7d5f86370e02fae8472c398f15a36e517bb8 # v1.5.4
